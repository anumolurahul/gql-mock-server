"""
Asset Under Management
"""
type AUM {
  asOfDate: DateTime
  aum: Float!
  currency: Currency!
  groupByValue: String
}

"""
Attribute to group the AUM
"""
enum AUMGroupByInput {
  """
  Group by Asset Classes
  """
  ASSET_CLASS

  """
  Group by client segment eg PLATINUM GOLD
  """
  CLIENT_SEGMENT

  """
  Group by instrument currency
  """
  CURRENCY

  """
  Group by instrument region
  """
  REGION

  """
  Group by client risk level
  """
  RISK_LEVEL
}

"""
Autogenerated return type of AddRelationshipManager
"""
type AddRelationshipManagerPayload {
  """
  errors
  """
  errors: [UserError!]

  """
  relationship manager
  """
  relationshipManager: RelationshipManager
}

"""
Type to expose wrapper for all single instrument purchases (Equity, Funds et al)
"""
type AllProduct implements PortfolioInterface {
  """
  portfolio returns
  """
  annualizedReturn: Float

  """
  Investor's instrument holding details linked to the portfolio
  """
  assetAccounts(
    """
    Limits instruments by search_key
    """
    searchKey: String
  ): [AssetAccount!]

  """
  Details of all instrument wise transactions
  """
  assetTrades(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Sort by date / action etc
    """
    sortBy: String

    """
    Ascending or descending
    """
    sortDirection: SortDirection
  ): AssetTradeConnection

  """
  Investor's Cash Accounts
  """
  cashAccounts: [CashAccount!]

  """
  Display name of the product
  """
  displayName: String

  """
  ID of the product
  """
  id: ID!

  """
   the date when the investment starts
  """
  investmentStartDate: DateTime

  """
  portfolio monthly investment amount
  """
  monthlyInvestmentAmount: Float

  """
  Name of the product
  """
  name: String

  """
  Provides performance attributes for a product
  """
  portfolioPerformance(
    """
    Input attributes to fetch holding performance data
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput
  ): HoldingPerformance

  """
  risk profile of the portfolio
  """
  riskProfile: RiskProfile

  """
  Type of the product
  """
  type: String
}

"""
Holding details for a portfolio
"""
type AssetAccount {
  """
  Average purchase price of an instrument
  """
  averagePurchasePrice: Money!

  """
  Reporting currency of the asset account
  """
  currency: Currency!
  holdingUnits: HoldingUnit!

  """
  Total value of the holdings
  """
  holdingValue(
    """
    Holding value on specific dates. Default to current date.
    """
    asOf: DateTime
  ): Money!
  instrument: Instrument

  """
  Computes the profit or loss in the instrument's native currency
  """
  profitLoss: Float
  trades: [AssetTrade!]
}

"""
Filter investors by asset classes
"""
enum AssetClassFilter {
  """
  Commodities
  """
  COMMODITIES

  """
  Equity
  """
  EQUITY

  """
  Fixed Income
  """
  FIXED_INCOME

  """
  Exchange
  """
  FX

  """
  Multi Asset
  """
  MULTI_ASSET
}

"""
Holding Trade. Each trades are linked to an instrument as well as a portfolio
"""
type AssetTrade {
  accountNumber: String
  currency: Currency!
  id: ID!
  instrument: Instrument
  tradeDate: DateTime!

  """
  eg. BUY / SELL
  """
  tradeType: TradeAction!

  """
  Executed, Completed etc
  """
  transactionStatus: TransactionStatus!
  unitPrice: Float!
  units: Float!
}

"""
The connection type for AssetTrade.
"""
type AssetTradeConnection {
  """
  A list of edges.
  """
  edges: [AssetTradeEdge]

  """
  A list of nodes.
  """
  nodes: [AssetTrade]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type AssetTradeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AssetTrade
}

"""
Filter investors by AUM
"""
enum AumFilter {
  """
  Between 100k and 250k
  """
  between_100K_and_250K

  """
  Between 1M and 2M
  """
  between_1M_and_2M

  """
  Between 250k and 500k
  """
  between_250K_and_500K

  """
  Between 2M and 3M
  """
  between_2M_and_3M

  """
  Between 500k and 750k
  """
  between_500K_and_750K

  """
  Between 5k and 100k
  """
  between_5K_and_100K

  """
  Between 750k and 1M
  """
  between_750K_and_1M

  """
  Greater than 5M
  """
  greater_than_5M

  """
  Less than 5k
  """
  less_than_5K
}

"""
Autogenerated return type of AuthenticateUser
"""
type AuthenticateUserPayload {
  authentication: UserAuthentication!
  errors: [String!]!
}

"""
Filter investors by Available cash
"""
enum AvailableCashFilter {
  """
  Between 100k and 250k
  """
  between_100K_and_250K

  """
  Between 1k and 50k
  """
  between_1K_and_50K

  """
  Between 1M and 2M
  """
  between_1M_and_2M

  """
  Between 250k and 500k
  """
  between_250K_and_500K

  """
  Between 2M and 3M
  """
  between_2M_and_3M

  """
  Between 500k and 750k
  """
  between_500K_and_750K

  """
  Between 50k and 100k
  """
  between_50K_and_100K

  """
  Between 750k and 1M
  """
  between_750K_and_1M

  """
  Greater than 5M
  """
  greater_than_5M

  """
  Less than 1k
  """
  less_than_1K
}

interface BaseInstrument {
  country: Country
  currency: Currency

  """
  Instrument labels 
  """
  instrumentLabel: InstrumentLabel

  """
  Name of the instrument
  """
  instrumentName: String

  """
  Price of the instrument
  """
  instrumentPrice: String

  """
  ISIN for the instrument
  """
  isin: String

  """
  Product type of the instrument
  """
  productType: String

  """
  Product type id.Same as in MDS
  """
  productTypeId: ID

  """
  Unique identifier for the instrument
  """
  wiCode: String
}

"""
Cash Account
"""
type CashAccount {
  accountHolder: Investor
  accountName: String
  accountNumber: String

  """
  List of cash balances for a cash account
  """
  cashBalances(
    """
    Cash balance on specific dates. Default to current date.
    """
    asOf: DateTime
  ): [CashBalance!]
  id: ID!
  portfolio: Goal
  reportingCurrency: Currency
}

"""
Cash Balance
"""
type CashBalance {
  asOfDate: DateTime
  currency: Currency
  value: Money
}

"""
Relationship manager commission detail
"""
type Commission {
  commission: Float!
  currency: Currency!
  fromDate: DateTime!

  """
  Eg., DIY passive, RM active, Equity
  """
  groupByValue: String
  toDate: DateTime!
}

"""
Attribute to group the Commission received by relationship manager
"""
enum CommissionGroupByInput {
  """
  Group by Asset Classes
  """
  ASSET_CLASS

  """
  DIY/RM managed, Active/Passive portfolios. Default Value
  """
  INVESTMENT_JOURNEY
}

type Country {
  code: String
  id: ID
  name: String
}

"""
Autogenerated input type of CreateInvestorFilterTemplate
"""
input CreateInvestorFilterTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  inputParams: TemplateInput!

  """
  Id of the relationship Manager
  """
  relationshipManagerId: String
}

"""
Autogenerated return type of CreateInvestorFilterTemplate
"""
type CreateInvestorFilterTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  output: FilterTemplates
}

type Currency {
  displayName: String
  id: ID
  isoCode: String
  name: String
}

"""
Filter investors by Currency
"""
enum CurrencyFilter {
  """
  Australian Dollar
  """
  AUD

  """
  Euro
  """
  EUR

  """
  GB Dollar
  """
  GBD

  """
  Hong Kong Dollar
  """
  HKD

  """
  KW Dollar
  """
  KWD

  """
  Malaysian Ringgit
  """
  MYR

  """
  SAR
  """
  SAR

  """
  Singapore Dollar
  """
  SGD

  """
  Thai Baht
  """
  THB

  """
  US Dollar
  """
  USD

  """
  Japanese Yen
  """
  YEN
}

"""
Filters for RM Dashboard
"""
type DashboardFilter {
  """
  Key used for template name
  """
  key: String!

  """
  Name of the Filter
  """
  name: String!

  """
  Array of selected/Available filter values
  """
  values: [String!]!
}

input DashboardFilterInput {
  """
  key of the filter
  """
  key: String!

  """
  Name of the filter
  """
  name: String!

  """
  Array of selected filter values
  """
  values: [String!]!
}

"""
Date Time ISO format
"""
scalar DateTime

"""
Autogenerated input type of DeleteInvestorFilterTemplate
"""
input DeleteInvestorFilterTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  templateId: String!
}

"""
Autogenerated return type of DeleteInvestorFilterTemplate
"""
type DeleteInvestorFilterTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Error Messages handled
  """
  errors: [Error!]

  """
  unique Id of deleted template.
  """
  id: ID

  """
  Name of deleted template.
  """
  name: String
}

"""
Autogenerated input type of EditInvestorFilterTemplate
"""
input EditInvestorFilterTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Input parameters for template
  """
  inputParams: TemplateInput!

  """
  Relationship Manager Id
  """
  relationshipManagerId: String

  """
  Unique template Id
  """
  templateId: String!
}

"""
Autogenerated return type of EditInvestorFilterTemplate
"""
type EditInvestorFilterTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  output: FilterTemplates
}

"""
Equity single purchase type
"""
type Equity implements PortfolioInterface {
  """
  portfolio returns
  """
  annualizedReturn: Float

  """
  Investor's instrument holding details linked to the portfolio
  """
  assetAccounts(
    """
    Limits instruments by search_key
    """
    searchKey: String
  ): [AssetAccount!]

  """
  Details of all instrument wise transactions
  """
  assetTrades(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Sort by date / action etc
    """
    sortBy: String

    """
    Ascending or descending
    """
    sortDirection: SortDirection
  ): AssetTradeConnection

  """
  Investor's Cash Accounts
  """
  cashAccounts: [CashAccount!]

  """
  Display name of the product
  """
  displayName: String

  """
  ID of the product
  """
  id: ID!

  """
   the date when the investment starts
  """
  investmentStartDate: DateTime

  """
  portfolio monthly investment amount
  """
  monthlyInvestmentAmount: Float

  """
  Name of the product
  """
  name: String

  """
  Provides performance attributes for a product
  """
  portfolioPerformance(
    """
    Input attributes to fetch holding performance data
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput
  ): HoldingPerformance

  """
  risk profile of the portfolio
  """
  riskProfile: RiskProfile

  """
  Type of the product
  """
  type: String
}

"""
Error Handling
"""
type Error {
  """
  Error Message
  """
  message: String!

  """
  Path where the error Occurs
  """
  path: [String!]
}

type Expected_Return {
  oneYearReturn: Float!
  threeYearReturn: Float!
}

"""
Template and Ideas of a RM
"""
type FilterTemplates {
  """
  Date at which template is created
  """
  createdAt: String!
  filters: [DashboardFilter!]!

  """
  Unique Template id
  """
  id: ID!

  """
  Name of the template
  """
  name: String!

  """
  Id of the relationship Manager
  """
  relationshipManagerId: String
}

"""
Investment Funds detail
"""
type Fund implements BaseInstrument {
  country: Country
  currency: Currency

  """
  Expense ratio for the funds
  """
  expenseRatio: Float
  factsheetUrl: String

  """
  Group of fund manager names
  """
  fundManager: [String!]
  incomeGrowthFocus: String
  incorporationDate: String

  """
  Industry allocation and their weights
  """
  industryAllocation: [FundHoldings!]

  """
  Instrument labels 
  """
  instrumentLabel: InstrumentLabel

  """
  Name of the instrument
  """
  instrumentName: String

  """
  Price of the instrument
  """
  instrumentPrice: String
  investmentStrategy: String

  """
  ISIN for the instrument
  """
  isin: String

  """
  Minimum initial investment amount for funds
  """
  minimumInitialInvestment: Int

  """
  Minimum subsequent amount for funds
  """
  minimumSubsequentAmount: Int

  """
  Performance metrics of funds
  """
  normalizedPerformance(
    """
    Date interval for which performance metrics have to be returned
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput = {fromDate: "2014-01-01T00:00:00+00:00", toDate: "2019-07-26T02:02:20+00:00"}
  ): FundPerformance

  """
  Previous close price for the funds
  """
  previousClosePrice: Float
  priceToBookRatio: Float
  priceToEarningsRatio: Float

  """
  Product type of the instrument
  """
  productType: String

  """
  Product type id.Same as in MDS
  """
  productTypeId: ID

  """
  Region wise allocation and their weights
  """
  regionAllocation: [FundHoldings!]

  """
  Returns for the fund for 3 interval types(1year,3year,5 year)
  """
  returns: FundInterval

  """
  Sharpe ratio for the funds
  """
  sharpeRatio: FundInterval

  """
  Volatility/SD for 3 interval types(1year,3year,5 year)
  """
  standardDeviation: FundInterval

  """
  Strategic asset allocation in stock(equity),bond,cash,alternatives
  """
  strategicAssetAllocation: FundAssetAllocation
  ticker: String

  """
  Top 10 holdings for funds and their weights
  """
  topTenHoldings: [FundHoldings!]

  """
  Total aum of the funds
  """
  totalAum: String
  turnOverRatio: Float

  """
  Unique identifier for the instrument
  """
  wiCode: String
}

type FundAssetAllocation {
  alternatives: String
  bond: String
  cash: String
  stock: String
}

type FundHoldings {
  name: String!
  weights: String!
}

type FundInterval {
  """
  Interval for five year data
  """
  fiveYear: Float

  """
  Inteval for one year data
  """
  oneYear: Float

  """
  Interval for three year data
  """
  threeYear: Float
}

"""
Performance attributes of a Fund
"""
type FundPerformance {
  """
  Normalised benchmark returns with an initial investment of 10k
  """
  benchmarkPerformance: [FundPerformanceValue!]

  """
  Normalised fund returns with an initial investment of 10k
  """
  fundPerformance: [FundPerformanceValue!]
}

"""
Performance attribute values
"""
type FundPerformanceValue {
  asOfDate: DateTime
  value: Money
}

"""
Fund single purchase type
"""
type FundProduct implements PortfolioInterface {
  """
  portfolio returns
  """
  annualizedReturn: Float

  """
  Investor's instrument holding details linked to the portfolio
  """
  assetAccounts(
    """
    Limits instruments by search_key
    """
    searchKey: String
  ): [AssetAccount!]

  """
  Details of all instrument wise transactions
  """
  assetTrades(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Sort by date / action etc
    """
    sortBy: String

    """
    Ascending or descending
    """
    sortDirection: SortDirection
  ): AssetTradeConnection

  """
  Investor's Cash Accounts
  """
  cashAccounts: [CashAccount!]

  """
  Display name of the product
  """
  displayName: String

  """
  ID of the product
  """
  id: ID!

  """
   the date when the investment starts
  """
  investmentStartDate: DateTime

  """
  portfolio monthly investment amount
  """
  monthlyInvestmentAmount: Float

  """
  Name of the product
  """
  name: String

  """
  Provides performance attributes for a product
  """
  portfolioPerformance(
    """
    Input attributes to fetch holding performance data
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput
  ): HoldingPerformance

  """
  risk profile of the portfolio
  """
  riskProfile: RiskProfile

  """
  Type of the product
  """
  type: String
}

"""
Filter investors by geography
"""
enum GeographyFilter {
  """
  Asia ex Japan
  """
  ASIA_EX_JAPAN

  """
  Australia
  """
  AUSTRALIA

  """
  EMEA
  """
  EMEA

  """
  Europe ex UK
  """
  EUROPE_EX_UK

  """
  Global
  """
  GLOBAL

  """
  Japan
  """
  JAPAN

  """
  Malaysia
  """
  MALAYSIA

  """
  Singapore
  """
  SINGAPORE

  """
  United Kingdom
  """
  UK

  """
  United States of America
  """
  US
}

"""
Investor Portfolio Details. Lot more fields to be add here.
"""
type Goal implements PortfolioInterface {
  """
  portfolio returns
  """
  annualizedReturn: Float

  """
  Investor's instrument holding details linked to the portfolio
  """
  assetAccounts(
    """
    Limits instruments by search_key
    """
    searchKey: String
  ): [AssetAccount!]

  """
  Details of all instrument wise transactions
  """
  assetTrades(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Sort by date / action etc
    """
    sortBy: String

    """
    Ascending or descending
    """
    sortDirection: SortDirection
  ): AssetTradeConnection

  """
  Investor's Cash Accounts
  """
  cashAccounts: [CashAccount!]

  """
  Display name of the product
  """
  displayName: String

  """
  Portfolio's goal category. Eg. Retirement, New Home
  """
  goalCategory: GoalCategory

  """
  ID of the product
  """
  id: ID!

  """
   the date when the investment starts
  """
  investmentStartDate: DateTime

  """
  portfolio monthly investment amount
  """
  monthlyInvestmentAmount: Float

  """
  Name of the product
  """
  name: String

  """
  Provides performance attributes for a product
  """
  portfolioPerformance(
    """
    Input attributes to fetch holding performance data
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput
  ): HoldingPerformance

  """
  risk profile of the portfolio
  """
  riskProfile: RiskProfile

  """
  Type of the product
  """
  type: String
}

enum GoalCategory {
  Big_Spend
  Consolidated
  Education
  General_Investing
  New_Home
  Rainy_Day
  Retirement
}

type GoalType {
  description: String!
  displayImageUrl: String!
  id: ID!
  name: String!
}

"""
Performance attributes of a Holding or a group of Holdings
"""
type HoldingPerformance {
  """
  Total AUM for the investor
  """
  aums(
    """
    Total AUM of portfolios on a specific dates . Default to last available date.
    """
    asOf: [DateTime!]

    """
    Input specifying a period of time for which the gain/loss to be calculated with interval period.
    """
    dateInterval: PeriodOfTimeInput

    """
    Attribute by which AUM is grouped. Default to Asset Class
    """
    groupBy: AUMGroupByInput
  ): [AUM!]

  """
  Cash balance on a specific dates. Default to last available date
  """
  cashBalances(
    """
    Cash balance as of last available date. no other dates supported yet
    """
    asOf: [DateTime!]
  ): [CashBalance!]

  """
  Contributions made by Investor's during a specific period of time.
                      Date interval at this field level will override date interval input from parent field
  """
  contributions(
    """
    Input specifying a period of time for which total contribution to be calculated with interval period.
            Default to current month dividends without any interval.
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput
  ): [PeriodOfTimeValue!]

  """
  Cumulative cash available across investor and portfolio cash accounts
  """
  cumulativeCashBalance: CashBalance

  """
  Dividend earned by Investor's for a specific period of time.
                      Date interval at this field level will override date interval input from parent field
  """
  dividends(
    """
    Input specifying a period of time for which total dividend to be calculated with interval period.
            Default to current month dividends without any interval.
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput
  ): [PeriodOfTimeValue!]

  """
  Ending AUM for the portfolio(s) across a time period
  """
  endingAum: PeriodOfTimeValue

  """
  Fee paid by Investor's for a specific period of time.
                    Date interval at this field level will override date interval input from parent field
  """
  fee(
    """
    Input specifying a period of time for which total fee to be calculated with interval period.
            Default to current month fee without any interval.
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput
  ): [PeriodOfTimeValue!]

  """
  Sum of an investor's realized and unrealized gains or losses for a specific period of time. Loss will have -ve value.
  """
  gain(
    """
    Total gain/loss across portfolios on a specific dates . Default to last available date.
    """
    asOf: [DateTime!]

    """
    Input specifying a period of time for which the gain/loss to be calculated with interval period.
                         Default to current month gain/loss without any interval.
                         Eg: To calculate gain/loss for every month in last year interval will be Monthly
    """
    dateInterval: PeriodOfTimeInput
  ): [PeriodOfTimeValue!]

  """
  Net contributions made by an investor during a specific period of time, i.e. total contributions - withdrawals
                      Date interval at this field level will override date interval input from parent field
  """
  netContributions(
    """
    Input specifying a period of time for which net contribution is to be calculated with interval period.
            Default to current month dividends without any interval.
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput
  ): [PeriodOfTimeValue!]

  """
  Investor's realized gain/Loss for a specific period of time. Loss will have -ve value.
  """
  realizedGainLoss(
    """
    Realized gain across portfolios on a specific dates . Default to last available date.
    """
    asOf: [DateTime!]

    """
    Input specifying a period of time for which the realized gain/loss to be calculated with interval period.
                         Default to current month gain/loss without any interval.
                         Eg: To calculate gain/loss for every month in last year interval will be Monthly
    """
    dateInterval: PeriodOfTimeInput
  ): [PeriodOfTimeValue!]

  """
  Starting AUM for the portfolio(s) across a time period
  """
  startingAum: PeriodOfTimeValue

  """
  Investor's unrealized gain/Loss for a specific period of time. Loss will have -ve value.
  """
  unrealizedGainLoss(
    """
    Unrealized gain across portfolios on a specific dates . Default to last available date.
    """
    asOf: [DateTime!]

    """
    Input specifying a period of time for which the unrealized gain/loss to be calculated with interval period.
                         Default to current month gain/loss without any interval.
                         Eg: To calculate gain/loss for every month in last year interval will be Monthly
    """
    dateInterval: PeriodOfTimeInput
  ): [PeriodOfTimeValue!]
}

"""
Represents signed double-precision fractional values as specified by [IEEE
754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar HoldingUnit

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Idea {
  """
  Date at which idea is created
  """
  createdAt: ISO8601DateTime!

  """
  If the idea is the one currently applied
  """
  currentlyApplied: Boolean

  """
  ID of the idea
  """
  id: ID!

  """
  Status if the idea is in use or not
  """
  isDeleted: Boolean

  """
  The name of the idea
  """
  name: String!

  """
  The priority of the idea
  """
  priority: Int!
}

"""
input to apply predefined ideas like maximum loss suffered
"""
input IdeasInput {
  """
  Idea ID to apply and filter clients
  """
  ideaId: Int

  """
  Last used idea priority. It will be used to identify next priority
  """
  lastAppliedIdeaId: Int
}

"""
Details about an instrument
"""
type Instrument {
  assetClass: String
  country: Country
  currency: Currency
  exchange: String
  id: ID
  isin: String
  minPurchaseAmount: String
  name: String
  price: Float
  productType: String
}

"""
The connection type for BaseInstrument.
"""
type InstrumentConnection {
  """
  A list of edges.
  """
  edges: [InstrumentEdge]

  """
  A list of nodes.
  """
  nodes: [BaseInstrument]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type InstrumentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BaseInstrument
}

"""
Filters for RM Dashboard
"""
type InstrumentFilter {
  """
  Key used for template name
  """
  key: String!

  """
  Name of the Filter
  """
  name: String!

  """
  Array of selected/Available filter values
  """
  values: [InstrumentFilterValue!]!
}

"""
Attributes to filter the instruments list
"""
input InstrumentFilterInput {
  """
  Filters instruments on the basis of asset class
  """
  assetclasses: [AssetClassFilter!]

  """
  Filters instruments on the basis of currency
  """
  currencies: [CurrencyFilter!]

  """
  Filters instruments on the basis of geography
  """
  geographies: [GeographyFilter!]

  """
  Filters instruments on the basis of AUM
  """
  investmentBudget: [AumFilter!]

  """
  Filters instruments on the basis of returns
  """
  returns: [ReturnsFilter!]
}

"""
Array of selected/Available filter values
"""
type InstrumentFilterValue {
  """
  Display string for user interface
  """
  displayString: String!

  """
  Enum key to be passed, while filtering instruments
  """
  inputEnumKey: String!
}

type InstrumentLabel {
  topAumPercentile: Float
  topSellingPercentile: Float
}

"""
Sort instruments by
"""
input InstrumentSortInput {
  """
  Sort instruments by AUM percentile
  """
  topAum: InstrumentSortOption

  """
  Sort instruments by top selling percentile
  """
  topSelling: InstrumentSortOption
}

"""
Instrument sort option attributes
"""
input InstrumentSortOption {
  """
  Order in which the instruments have to be displayed
  """
  ordering: Int!

  """
  Percentile value
  """
  percentile: Float!

  """
  Sort direction
  """
  sortDirection: SortDirection
}

"""
Investor Detail
"""
type Investor {
  accountNumber: String

  """
  Investor's Cash Accounts
  """
  cashAccounts: [CashAccount!]
  citizenshipCountry: Country

  """
  Consolidated Portfolio Details of Investor
  """
  consolidatedPortfolio: Goal
  contactNumber: String
  customerSince: DateTime
  dateOfBirth: DateTime
  displayImageUrl: String
  displayName: String
  email: String
  firstName: String
  id: ID!
  idProofs: [InvestorIdentityProof!]
  investorSegment: InvestorSegment

  """
  KYC documents submitted by investor
  """
  kycAttachments: [InvestorKycDocument!]
  lastActivityDate: DateTime
  lastName: String
  maritalStatus: String

  """
  Portfolio Details of Investor
  """
  portfolios(
    """
    To filter by specific portfolio ids. Default to consolidated Portfolio
    """
    portfolioIds: [ID!]
  ): [PortfolioInterface!]

  """
  Preferences of Investor
  """
  preferences(
    """
    Specific preference category to filter by.
             Default to All preference categories
    """
    preferenceCategories: [InvestorPreferenceCategory!]
  ): [InvestorPreference!]
  referencedBy: Investor
  relationshipManagerLastContactDate: DateTime
  riskProfile: RiskLevel
}

"""
The connection type for Investor.
"""
type InvestorConnection {
  """
  A list of edges.
  """
  edges: [InvestorEdge]

  """
  A list of nodes.
  """
  nodes: [Investor]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type InvestorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Investor
}

"""
Attribute to filter the investor list.
"""
input InvestorFilterInput {
  """
  Filters investors on the basis of asset class
  """
  assetclasses: [AssetClassFilter!]

  """
  Filters investors on the basis of available cash
  """
  availablecash: [AvailableCashFilter!]

  """
  Filters investors on the basis of currency
  """
  currencies: [CurrencyFilter!]

  """
  Filters investors on the basis of geography
  """
  geographies: [GeographyFilter!]

  """
  Restrict the list to specified investors
  """
  investorIds: [ID!]

  """
  Restrict the list to investors who are clients of specific relationship managers
  """
  relationshipManagerIds: [ID!]

  """
  Filters investors on the basis of returns
  """
  returns: [ReturnsFilter!]

  """
  Filters investors on the basis of AUM
  """
  totalaum: [AumFilter!]
}

type InvestorIdentityProof {
  documentUrl: String

  """
  ID number/string. Eg., Passport number
  """
  idNumber: String!

  """
  Type of the ID proof. Eg., Passport
  """
  idType: String!
  issuedCountry: Country
  issuedDate: DateTime
}

type InvestorKycDocument {
  """
  URL to access stored ID proof
  """
  documentUrl: String

  """
  KYC dou file type Eg. Front/Back
  """
  fileType: String

  """
  KYC Document file name
  """
  resourceFileName: String
}

"""
Investor Detail
"""
type InvestorPreference {
  preferenceCategory: InvestorPreferenceCategory!
  preferenceValues: [String!]!
}

"""
Investment preference catagories that are supported
"""
enum InvestorPreferenceCategory {
  ASSET_CLASS
  CURRENCY
  EXCEPTION
  EXPECTED_RETURN
  GEOGRAPHY
  SECTOR
  STRATEGY
}

"""
Attributes for storing and updating investor preferences
"""
input InvestorPreferenceInput {
  preferenceCategory: InvestorPreferenceCategory!
  preferenceValues: [String!]!
}

"""
Investor Segments
"""
enum InvestorSegment {
  KSE
  Mass
  PB
  Prime
}

"""
Sortable fields for Investor
"""
enum InvestorSortField {
  aum
  cash_balance
  first_name
  gain
  investor_segment
  last_name
}

"""
sort
"""
input InvestorSortInput {
  sortColumn: InvestorSortField!
  sortDirection: SortDirection
}

"""
Represents signed double-precision fractional values as specified by [IEEE
754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Money

type Mutation {
  """
  to add or remove investor preferences
  """
  addOrRemovePreference(investorId: Int!, isPreferred: Boolean!, key: String!, preferenceType: String!): Boolean!

  """
  add new relationship managers
  """
  addRelationshipManager(rmAttributes: RelationshipManagerInput!): AddRelationshipManagerPayload
  calculateRetirementGoal(inputParams: RetirementGoalCalculationInput!): RetirementGoalCalculatorPayload

  """
  Create new Template dashboard
  """
  createInvestorFilterTemplate(input: CreateInvestorFilterTemplateInput!): CreateInvestorFilterTemplatePayload

  """
  Delete a template in dashboard filter
  """
  deleteInvestorFilterTemplate(input: DeleteInvestorFilterTemplateInput!): DeleteInvestorFilterTemplatePayload

  """
  Edit existing Template dashboard
  """
  editInvestorFilterTemplate(input: EditInvestorFilterTemplateInput!): EditInvestorFilterTemplatePayload

  """
  update investor preferences
  """
  saveInvestorPreferences(investorId: ID!, investorPreferences: [InvestorPreferenceInput!]!): SaveInvestorPreferencesPayload

  """
  trigger to sync reporting database
  """
  syncReportingDb(asOf: DateTime!, investorId: ID): Boolean

  """
  trigger to sync reporting database
  """
  triggerSync(asOf: DateTime!): RakeLog
  userAuthentication(attributes: UserAuthenticationInput!): AuthenticateUserPayload
}

type PageCursor {
  """
  last cursor on the previos page
  """
  cursor: String!

  """
  is this the current page?
  """
  isCurrent: Boolean!

  """
  page number out of totalPages
  """
  page: Int!
}

type PageCursors {
  all: [PageCursor!]!

  """
  optional, may be included in field all
  """
  first: PageCursor

  """
  optional, may be included in field all
  """
  last: PageCursor
  previous: PageCursor
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Input specifying a period of time and interval
"""
input PeriodOfTimeInput {
  """
  Start date for a specific period
  """
  fromDate: DateTime

  """
  Group the results by a specific interval
  """
  interval: TimeInterval

  """
  End date for a specific period
  """
  toDate: DateTime
}

"""
Relationship manager revenue detail
"""
type PeriodOfTimeValue {
  asOfDate: DateTime
  currency: Currency!
  fromDate: DateTime
  toDate: DateTime
  value: Float
}

"""
Input specifying a period of time without interval
"""
input PeriodOfTimeWithoutIntervalInput {
  """
  Start date for a specific period
  """
  fromDate: DateTime

  """
  End date for a specific period
  """
  toDate: DateTime
}

"""
Common GraphQL structure for all portfolio types
"""
interface PortfolioInterface {
  """
  portfolio returns
  """
  annualizedReturn: Float

  """
  Investor's instrument holding details linked to the portfolio
  """
  assetAccounts(
    """
    Limits instruments by search_key
    """
    searchKey: String
  ): [AssetAccount!]

  """
  Details of all instrument wise transactions
  """
  assetTrades(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Sort by date / action etc
    """
    sortBy: String

    """
    Ascending or descending
    """
    sortDirection: SortDirection
  ): AssetTradeConnection

  """
  Investor's Cash Accounts
  """
  cashAccounts: [CashAccount!]

  """
  Display name of the product
  """
  displayName: String

  """
  ID of the product
  """
  id: ID!

  """
   the date when the investment starts
  """
  investmentStartDate: DateTime

  """
  portfolio monthly investment amount
  """
  monthlyInvestmentAmount: Float

  """
  Name of the product
  """
  name: String

  """
  Provides performance attributes for a product
  """
  portfolioPerformance(
    """
    Input attributes to fetch holding performance data
    """
    dateInterval: PeriodOfTimeWithoutIntervalInput
  ): HoldingPerformance

  """
  risk profile of the portfolio
  """
  riskProfile: RiskProfile

  """
  Type of the product
  """
  type: String
}

type Query {
  """
  List of available currencies
  """
  availableCurrencies: [Currency!]
  goalTypes: [GoalType!]!

  """
  Filters for Instruments
  """
  instrumentFilters: [InstrumentFilter!]!

  """
  List of instruments of various types
  """
  instruments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering instruments based on instrument label
    """
    filter: InstrumentFilterInput

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Instrument for a given ID
    """
    instrumentId: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Instruments of a particular type
    """
    productType: String!

    """
    Sorting instruments for a given label and direction
    """
    sort: InstrumentSortInput
  ): InstrumentConnection!

  """
  Details of investors
  """
  investors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Attribute to filter the investor list.
    """
    filter: InvestorFilterInput

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Attribute to get investor data on a specified reporting currency
    """
    reportingCurrency: String

    """
    Returns based on sort column
    """
    sort: InvestorSortInput
  ): InvestorConnection
  marketplaceStrategies: [Strategy!]!

  """
  Details about a relationship manager
  """
  relationshipManagers(
    """
    Attribute to apply idea on investors
    """
    ideaInput: IdeasInput

    """
    IDs of the Relationship managers
    """
    ids: [ID!]

    """
    RM lead argument to fetch data for his entire org structure
    """
    includeOrg: Boolean

    """
    ID of selected reportee relationship manager
    """
    reporteeRmIds: [ID!]
    reportingCurrency: String
  ): [RelationshipManager!]!

  """
  Sync trigged histories for updating reports tables.
  """
  reportSyncHistory(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RakeLogConnection

  """
  Search investor and product details
  """
  search(
    """
    Relationship manager id
    """
    rmId: ID

    """
    Search string
    """
    searchKey: String!

    """
    Search investors only
    """
    searchOnlyInvestors: Boolean
  ): [Search!]
}

"""
Sync Job progress status
"""
type RakeLog {
  createdAt: DateTime!

  """
  Job end time
  """
  endTime: DateTime
  id: ID!

  """
  Progress status 0-100
  """
  progressPct: Int

  """
  Job start time
  """
  startTime: DateTime

  """
  Status value like inprogress/failed/success
  """
  status: String

  """
  Name of the job/cron running
  """
  taskName: String
  updatedAt: DateTime!
}

"""
The connection type for RakeLog.
"""
type RakeLogConnection {
  """
  A list of edges.
  """
  edges: [RakeLogEdge]

  """
  A list of nodes.
  """
  nodes: [RakeLog]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type RakeLogEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RakeLog
}

"""
Relationship manager detail
"""
type RelationshipManager {
  appliedIdea: Idea

  """
  AUM managed by the relationship manager
  """
  aums(
    """
    AUM for a specific set of dates. Default to current date and as_of will get
    precedence if query parameter contains both as_of and period interval
    """
    asOf: [DateTime!]

    """
    Group AUM by ASSET_CLASS, CLIENT_SEGMENT etc
    """
    groupBy: AUMGroupByInput

    """
    Period interval to get AUM aggregation. E.g from date - to date with interval of 3 months
    """
    interval: PeriodOfTimeInput
  ): [AUM!]

  """
  Average advisory fee for the relationship manger
  """
  averageAdvisoryFee: Float

  """
  List of investors managed by the relationship manager
  """
  clients(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Attribute to filter the investor list.
    """
    filter: InvestorFilterInput

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Attribute to get investor data on a specified reporting currency
    """
    reportingCurrency: String

    """
    Returns based on sort column
    """
    sort: InvestorSortInput
  ): InvestorConnection

  """
  Number of existing clients for the relationship manager
  """
  clientsCount: Int

  """
  Currency in which the values to be presented
  """
  currency: Currency

  """
  Name to be displayed
  """
  displayName: String

  """
  Date of birth of the Relationship manager
  """
  dob: DateTime

  """
  Email ID
  """
  email: String

  """
  Employee ID the Relationship manager
  """
  employeeId: String

  """
  Filters for RM Dashboard
  """
  filters: [DashboardFilter!]!

  """
  First name
  """
  firstName: String!

  """
  Relationship manager ID
  """
  id: ID

  """
  Saved Ideas for Rm Dashboard
  """
  ideas: [Idea!]

  """
  Relationship manager joining date
  """
  joiningDate: DateTime

  """
  Last name
  """
  lastName: String

  """
  Commission received from investments managed by the relationship manager.
  """
  pastCommissions(
    """
    Attribute to group the Commission received by relationship manager. Default to Investment Journey
    """
    groupByAttributes: CommissionGroupByInput

    """
    PeriodOfTimeInput specifying a period of time with interval. Default to current month's revenue
    """
    timeAttributes: PeriodOfTimeInput
  ): [Commission!]

  """
  Revenue received from investments managed by the relationship manager. Call
  with no argument will return current month's revenue
  """
  pastRevenues(
    """
    Input specifying a period of time with interval
    """
    attributes: PeriodOfTimeInput
  ): [Revenue!]

  """
  profile picture of relationship manager
  """
  photoUrl: Url

  """
  Number of current prospects for the relationship manager
  """
  prospectsCount: Int

  """
  List of reporting relationship manager for a particular relationship manager lead
  """
  reportingRelationshipManagers(
    """
    Default to current date and as_of will get precedence if query parameter contains both as_of and period interval
    """
    asOf: [DateTime!]

    """
    Search key to find reportee relationship managers
    """
    searchKey: String

    """
    Sorts relationship managers for the given input type
    """
    sortByInput: SortRmLeaderboard

    """
    Returns the top _n_ elements from the list
    """
    top: Int
  ): [RelationshipManager!]

  """
  Target AUM for the Relationship manager
  """
  targetRevenue: Int

  """
  Sample Templates for Rm Dashboard
  """
  templates: [FilterTemplates!]
}

"""
Attributes for creating relationship manager Identity Proof
"""
input RelationshipManagerIdentityProofInput {
  countryOfIssue: String
  dateOfIssue: String
  idNumber: String
  idType: String
  verifiedDate: String
  verifiedYn: Boolean
}

"""
Attributes for creating or updating relationship manager
"""
input RelationshipManagerInput {
  """
  customisable display name of RM
  """
  displayName: String

  """
  date of birth
  """
  dob: String
  email: String

  """
  employee ID of RM
  """
  employeeId: String
  firstName: String
  identityProofs: [RelationshipManagerIdentityProofInput!]

  """
  joining date of RM
  """
  joiningDate: String
  lastName: String

  """
  marital status of RM
  """
  maritalStatus: String

  """
  mobile phone number of RM
  """
  mobile: String

  """
  nationality of RM
  """
  nationality: String

  """
  photo URL of RM
  """
  photoUrl: String

  """
  pin code of RM
  """
  pincode: String
}

"""
Input for retirement goal calculation
"""
input RetirementGoalCalculationInput {
  currentAge: Int
  expensePerMonthPostRetirement: Float
  incomePerMonthPostRetirement: Float
  initialInvestment: Float
  lifeExpectancy: Int
  monthyContribution: Float
  retirementAge: Int
}

"""
Autogenerated return type of RetirementGoalCalculator
"""
type RetirementGoalCalculatorPayload {
  errors: [String!]!
  output: RetirementGoalOutput!
}

type RetirementGoalOutput {
  goalTarget: Float!
  maxEstimatedExpense: Int!
  minEstimatedExpense: Int!
}

"""
Filter investors by returns
"""
enum ReturnsFilter {
  """
  Between 10% and 15%
  """
  between_10_and_15

  """
  Between 15% and 20%
  """
  between_15_and_20

  """
  Between 1% and 5%
  """
  between_1_and_5

  """
  Between -5% and 1%
  """
  between_5_and_1

  """
  Between 5% and 10%
  """
  between_5_and_10
}

"""
Relationship manager revenue detail
"""
type Revenue {
  currency: Currency!
  fromDate: DateTime!
  revenue: Float!
  toDate: DateTime!
}

enum RiskLevel {
  """
  Aggressive risk profile
  """
  Aggressive

  """
  Balanced risk profile
  """
  Balanced

  """
  Cautious risk profile
  """
  Cautious

  """
  Defensive risk profile
  """
  Defensive

  """
  Growth risk profile
  """
  Growth
}

"""
Range of risk profiles
"""
enum RiskProfile {
  """
  Aggressive
  """
  AGGRESSIVE

  """
  Balanced
  """
  BALANCED

  """
  Conservative
  """
  CONSERVATIVE

  """
  Defensive
  """
  DEFENSIVE

  """
  Growth
  """
  GROWTH
}

"""
Autogenerated return type of SaveInvestorPreferences
"""
type SaveInvestorPreferencesPayload {
  """
  errors field
  """
  errors: [Error!]

  """
  Investor preferences
  """
  preferences: [InvestorPreference!]
}

"""
Entities which may be searched for
"""
union Search = Fund | Instrument | Investor

"""
Sort by ascending or descending
"""
enum SortDirection {
  ASC
  DESC
}

"""
Enum attribute to specify sorting parameter of a relationship manager data
"""
enum SortRmLeaderboard {
  """
  Sorting relationship manager data by AUM
  """
  AUM
}

type StandardDeviation {
  threeYearDeviation: Float!
}

type Strategy {
  currency: Currency!
  expectedReturns: Expected_Return!
  feeCharged: Float!
  id: Int!
  investmentType: String!
  minInvestment: Int!
  name: String!
  relevantTo: Int!
  sharpeRatio: Float!
  standardDeviation: StandardDeviation!
  strategyStyle: String!
}

"""
Input parameters for template
"""
input TemplateInput {
  """
  filters with selected Filters by the RM
  """
  filters: [DashboardFilterInput!]!

  """
  Name of the template
  """
  name: String!
}

enum TimeInterval {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

enum TradeAction {
  BUY
  SELL
}

enum TransactionStatus {
  Cancelled
  Executed
  Market_Cancelled
  Partially_Executed
  Rejected
  Reordered
  Submitted
  Updated
}

"""
A valid URL, transported as a string
"""
scalar Url

"""
User authentication response
"""
type UserAuthentication {
  accessToken: ID
  authenticityToken: ID
  error: String
  errorDecription: String

  """
  Duration for which the token is valid
  """
  expireIn: Int

  """
  1 - successful authentication. 0 - otherwise.
  """
  isAuthenticated: Boolean!
  otpKey: String
  tokenType: String

  """
  Typically the email address of user
  """
  uid: String
}

"""
Inputs to authenticate an user
"""
input UserAuthenticationInput {
  email: String!
  otpKey: String

  """
  OTP received by the user
  """
  otpValue: String
  password: String
}

"""
A user-readable error
"""
type UserError {
  """
  Error Message in detail
  """
  fields: String

  """
  A description of the error
  """
  message: String

  """
  Where this error came from
  """
  path: [String!]
}